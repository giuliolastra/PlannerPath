using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace ProjectONE.Utility
{
    /*
     * Represents a tree, with SplitSize child-Vertexs and Depth levels.
     * This tree is complete and each Vertex and edge have some well defined attributes.
     * This tree can be either auto-generated or build manually from scratch.
     */

    class Tree {

        public Vertex root { get; set; }
        public String type { get; set; } //Name of the tree
        int SplitSize { get; set; }
        int Depth { get; set; }
        private int ProgrVertexID;
        private int ProgrEdgeID;
        LinkedList<Attribute> VertexAttributes { get; set; } //list of attributes that Vertexs have
        LinkedList<Attribute> EdgeAttributes { get; set; } //list of attributes that Vertexs have
        XmlTextWriter fileWriter;

        public int getVertexProgID() {
            return this.ProgrVertexID++;
        }

        public int getEdgeProgID() {
            return this.ProgrEdgeID++;
        }

        public Tree(int splitSize, int depth) {
            this.SplitSize = splitSize;
            this.Depth = depth;
            this.VertexAttributes = null;
            this.EdgeAttributes = null;
        }

        public Tree(int splitSize, int depth, LinkedList<Attribute> vertexAttributes, LinkedList<Attribute> edgeAttributes) {
            this.SplitSize = splitSize;
            this.Depth = depth;
            this.VertexAttributes = vertexAttributes;
            this.EdgeAttributes = edgeAttributes;
            this.ProgrVertexID = 1;
            this.ProgrEdgeID = 1;
        }

        public Tree(int Depth, int SplitSize, LinkedList<Attribute> VertexAttributes, LinkedList<Attribute> EdgeAttributes, bool random) { 

            this.Depth = Depth;
            this.SplitSize = SplitSize;
            this.VertexAttributes = VertexAttributes;
            this.EdgeAttributes = EdgeAttributes;
            this.root = new Vertex(this.getVertexProgID(), GetRandomAttributes(true, VertexAttributes, EdgeAttributes).ToArray());

            this.randomGenerateTree();
        }

        public Tree(int Depth, int SplitSize, LinkedList<Attribute> VertexAttributes, LinkedList<Attribute> EdgeAttributes, bool random,int vPID,int ePID, String t, Vertex v) { 

            this.Depth = Depth;
            this.SplitSize = SplitSize;
            this.VertexAttributes = VertexAttributes;
            this.EdgeAttributes = EdgeAttributes;
            this.ProgrVertexID = vPID;
            this.ProgrEdgeID = ePID;
            this.type = t;
            this.root = v;

            this.randomGenerateTree();
        }

        public Tree(int D,int S,LinkedList<Attribute> VA,LinkedList<Attribute> EA,String t,Vertex cV, XmlTextWriter fW) {

            this.Depth = D;
            this.SplitSize = S;
            this.VertexAttributes = VA;
            this.EdgeAttributes = EA;
            this.type = t;
            this.root = cV;
            this.fileWriter = fW;

        }


        private void randomGenerateTree() {

            //Attaccare al root gli edge per splitsize volte e creare un sotto-albero a partire da ogni vertice collegato (fino a depth 0)

            for (int i = 0; i < this.SplitSize; i++) {
                
                Vertex childVertex = new Vertex(getVertexProgID(), GetRandomAttributes(true, VertexAttributes, EdgeAttributes).ToArray(), new LinkedList<Edge>(), root.Depth+1);
                this.root.append(new Edge(getEdgeProgID(), this.root, childVertex, GetRandomAttributes(false, VertexAttributes, EdgeAttributes)));
                
                Tree subTree;

                if(this.Depth > 0) 
                    subTree = new Tree(this.Depth-1,this.SplitSize,this.VertexAttributes,this.EdgeAttributes,true,getVertexProgID()-1,getEdgeProgID()-1,this.type,childVertex);

            }

        }

        public bool ToFile(String path) {

            String fileName = this.type;

            //Write general information
            if (!System.IO.Directory.Exists(path))
                return false;


            if (fileName.EndsWith(".xml") == false)
                fileName += ".xml";

            String completepath = "";

            if (path.EndsWith("/") == false && path.EndsWith("\\") == false)
            {
                completepath = path + "\\" + this.type;
            }
            else {
                completepath = path + this.type;
            }

            this.fileWriter = new XmlTextWriter(completepath, Encoding.ASCII);
            this.fileWriter.Formatting = Formatting.Indented;
            this.fileWriter.Indentation = 4;

            //Inizio File XML
            this.fileWriter.WriteStartDocument();
            this.fileWriter.WriteStartElement("Tree");

                /*
                    writer.WriteStartElement("GeneralInformation");
                    writer.WriteElementString("Type", this.type);
                    writer.WriteElementString("SplitSize", this.SplitSize.ToString());
                    writer.WriteElementString("Depth", this.Depth.ToString());
                    //Fine stampa info albero

                    //Stampa Attributi vertici (elenco nome+tipo)
                    writer.WriteStartElement("VertexesAttributes");

                    foreach (Attribute a in this.VertexAttributes)
                    {
                        writer.WriteStartElement("Attribute");
                        writer.WriteElementString("Type", a.type.ToString());
                        writer.WriteElementString("Name", a.Name);
                        writer.WriteEndElement(); //Attribute
                    }

                    writer.WriteEndElement(); //VertexesAttributes

                    //Stampa Attributi edge (elenco nome+tipo)
                    writer.WriteStartElement("EdgesAttributes");
                    foreach (Attribute a in this.EdgeAttributes)
                    {
                        writer.WriteStartElement("Attribute");
                        writer.WriteElementString("Type", a.type.ToString());
                        writer.WriteElementString("Name", a.Name);
                        writer.WriteEndElement(); //Attribute
                    }

                    writer.WriteEndElement(); //Edge Attributes
                    writer.WriteEndElement(); //GeneralInformations
                */

            this.fileWriter = this.generateTreeXML();

            this.fileWriter.WriteEndElement(); //Tree
            this.fileWriter.WriteEndDocument();
            this.fileWriter.Close();

            return true;
        }


        private XmlTextWriter generateTreeXML() {

            if (this.root == null)
                return this.fileWriter;

            if (this.root.OutgoingEdges == null)
                return this.fileWriter;

            return this.generateTreeXML(true);

        }

        private XmlTextWriter generateTreeXML(bool first) {

            if (this.root == null)
                return this.fileWriter;

            if (this.root.OutgoingEdges == null)
                return this.fileWriter;

            //Prima esecuzione
            if (first) {
            
                fileWriter.WriteStartElement("Vertex");
                fileWriter.WriteElementString("Name", root.Name.ToString());
                fileWriter.WriteElementString("Depth", root.Depth.ToString());
                
                /*
                    writer.WriteStartElement("Attributes");
                    foreach (Attribute a in root.Attributes)
                    {
                        writer.WriteElementString(a.Name,
                            a.type == Attribute.AttributeType.STRING ?
                            a.value_string : a.value_int.ToString());
                    }
                    writer.WriteEndElement(); //Attribute
                */
                
                fileWriter = this.generateTreeXML(false);
                fileWriter.WriteEndElement(); //Vertex
            
            } else {

                foreach (Edge e in this.root.OutgoingEdges) {

                    fileWriter.WriteStartElement("Edge");

                    /*

                        writer.WriteElementString("Name", e.Name.ToString());
                        writer.WriteStartElement("Attributes");

                        foreach (Attribute a in e.Attributes)
                        {
                            writer.WriteElementString(a.Name,
                                a.type == Attribute.AttributeType.STRING ?
                                a.value_string : a.value_int.ToString());
                        }

                        writer.WriteEndElement(); //Attributes
                    */

                    fileWriter.WriteStartElement("Vertex");
                    //fileWriter.WriteElementString("Name", e.Bottom.Name.ToString());
                    fileWriter.WriteElementString("Depth", e.Bottom.Depth.ToString());
                    
                    /*                
                        writer.WriteStartElement("Attributes");

                        foreach (Attribute a in e.Bottom.Attributes)
                        {
                            writer.WriteElementString(a.Name,
                                a.type == Attribute.AttributeType.STRING ?
                                a.value_string : a.value_int.ToString());
                        }

                        writer.WriteEndElement(); //Attributes
                    */
    
                    Tree subtree = new Tree(this.Depth-1,this.SplitSize,this.VertexAttributes,this.EdgeAttributes,this.type,this.root,fileWriter);
                    subtree.root = e.Bottom;

                    fileWriter = subtree.generateTreeXML(false);

                    fileWriter.WriteEndElement(); //Vertex
                    fileWriter.WriteEndElement(); //Edge

                }
            }

            return this.fileWriter;
        }


        public bool isEmpty() {
            return root == null;
        }
        

        private static LinkedList<Attribute> GetRandomAttributes(bool forVertex, LinkedList<Attribute> vertattrs, LinkedList<Attribute> edgeattrs) {
            
            //if attributes list not set => do nothing
            if (forVertex) {
                if (vertattrs == null)
                    return null;
            } else {
                if (edgeattrs == null)
                    return null;
            }

            LinkedList<Attribute> attr = new LinkedList<Attribute>();
            
            foreach (Attribute a in forVertex ? vertattrs : edgeattrs) {

                Attribute copy = a.Clone(); //well yes, it's needed indeed
                attr.AddLast(copy.generate());
            
            }
            return attr;
        }

    }

}
